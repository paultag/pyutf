#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import math
import re

parser = argparse.ArgumentParser(description="(main description)")
parser.add_argument("files", metavar="FILE", nargs="*",
                    type=argparse.FileType("r"),
                    help="(input files help)")
parser.add_argument("-t", "--translate", action="store_const",
                    dest="translate", const=True, default=False,
                    help="(translate / exec help)")
parser.add_argument("-s", "--show-source", action="store_const",
                    dest="show_source", const=True, default=False,
                    help="(show translate's source / write file help)")
args = parser.parse_args()

if len(args.files) == 0:
    parser.print_help()
if args.show_source:
    args.translate = True

crap = {
    "e": math.e,
    "π": math.pi,
    "ℤ": "int",
    "∀": "for",
    "∈": "in",
    "λ": "lambda",
    r"(\"{1,3}|\'{1,3})([^\1\\]*?(\\.[^\1\\]*?)*?)\1": None,
}
extr = {
    "e",
}
def wrap(word):
    return r"\b%s\b" % word

patt = '|'.join(k if k not in extr else wrap(k) for k in crap)

def repl(matched):
    if matched.group()[0] in ('"', "'"):
        return matched.group()
    else:
        return str(crap[matched.group()])

for fd in args.files:
    buff = re.sub(patt, repl, fd.read())
    if args.translate:
        if args.show_source:
            print buff
        else:
            if fd.name[-2:] == ".π":
                wo = fd.name[:-2] + ".py"
            else:
                wo = fd.name + ".py"
            open(wo, "w").write(buff)
    else:
        if len(args.files) > 1:
            print '>>> (exec file:', fd.name, '& out put is)'
        exec(buff)
        print
