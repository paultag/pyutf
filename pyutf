#!/usr/bin/env python
# -*- coding: utf-8 -*-

import argparse
import math
import re

class Symbol:
    """Symbolic class for UTF & others."""

    utf = { "π": math.pi,
            "≤": "<=",
            "≥": ">=",
            "≠": "!=",
            "≡": "==",
            "∅": "set()",
            "ℤ": "int",
            "∀": "for",
            "∈": "in",
            "λ": "lambda",
            "√": "math.sqrt" }
    eng = { "e": math.e }
    ign = { r"(\"{1,3}|\'{1,3})([^\1\\]*?(\\.[^\1\\]*?)*?)\1" }

    def __init__(self):
        self.all = {word: pattern[word]
                                for pattern in (self.utf, self.eng)
                                    for word in pattern}

        self.chk = "|".join(self.wrap(word, True)
                                for pattern in (self.all, self.ign)
                                    for word in pattern)

    def wrap(self, word, strict=False):
        if strict:
            if word not in self.eng:
                return word
        return r"\b%s\b" % word

    def replace(self, matched):
        try:
            matched = matched.group()
        except:
            pass

        if matched not in self.all:
            return matched
        else:
            return str(self.all[matched])

    def parse(self, paragraph):
        return re.sub(self.chk, self.replace, paragraph)


def init_argparse():
    """Main interface for the program."""

    parser = argparse.ArgumentParser(description="(main description)")
    parser.add_argument("files", metavar="FILE", nargs="*",
                        type=argparse.FileType("r"),
                        help="(input files help)")
    parser.add_argument("-t", "--translate", action="store_const",
                        dest="translate", const=True, default=False,
                        help="(translate / exec help)")
    parser.add_argument("-s", "--show-source", action="store_const",
                        dest="show_source", const=True, default=False,
                        help="(show translate's source / write file help)")
    args = parser.parse_args()

    if len(args.files) == 0:
        parser.print_help()

    return args


def show(script, method, file):
    print ">>> (%s file: %s yeild result) >>>" % (method, file.name)
    if method == "exec":
        exec(script)
    else:
        print script

def main():
    symbol = Symbol()
    args = init_argparse()

    for file in args.files:
        translated_script = symbol.parse(file.read())

        if not any([args.show_source, args.translate]):
            show(translated_script, "exec", file)

        if args.show_source:
            show(translated_script, "translate", file)
        if args.translate:
            if file.name[-3:] == ".π":
                out_file = file.name[:-3] + ".py"
            else:
                out_file = file.name + ".py"
            open(out_file, "w").write(translated_script)


if __name__ == "__main__":
    main()

